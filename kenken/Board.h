#pragma once

#include <vector>

/*
* Структура для представления ячеек сетки
*/
struct Cell {
    // Создание стандартного конструктора по умолчанию
    Cell() = default;

    // Инициализация членов структуры значениями по умолчанию
    int board_value = 0;    // Значение ячейки при генерации пазла
    int user_value =  0;    // Значение пользователя во время решения головоломки

    int group_id = 0;       // id группы, к которой принадлежит ячейка
    int target_value = 0;   // Целевое значение в группе
    char operation = '+';   // Арифметическая операция в группе
};

/*
* Класс Board отвечает за представление и управление состоянием игрового поля
*/
class Board {
public:
    /*
    * Конструкторы
    */

    Board(int size); // С параметром по умолчанию - размер поля

    /*
    * Вспомогательные функции
    */

    void swap(std::vector<std::vector<Cell>>& other);

    /*
    * Методы
    */
    
    int getSize() const;                            // Получить размер игрового поля

    void setValue(int row, int col, int value);     // Установить значение в ячейку (ввод пользователя)

    int getValue(int row, int col) const;           // Получить значение в ячейке (редактирование)
    
    void displayBoard() const;                      // Отобразить игровое поле

private:
    int b_size_ = 0;                                // Размер игрового поля (N x N)

    std::vector<std::vector<Cell>> board_;          // Двумерный вектор для хранения значений (игровое поле)
    // Двумерный вектор объединенных ячеек, где индекс является идентификатором для группы
    std::vector<std::vector<int>> groups_;          // Операция, целевой результат
};